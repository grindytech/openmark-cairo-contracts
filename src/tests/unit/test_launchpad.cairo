use super::super::super::launchpad::interface::ILaunchpadDispatcherTrait;
use core::option::OptionTrait;
use core::traits::TryInto;
use openmark::launchpad::interface::{
    ILaunchpadDispatcher, ILaunchpadProviderDispatcherTrait, ILaunchpadProviderDispatcher,
};
use openzeppelin::utils::serde::SerializedAppend;

use snforge_std::{declare, ContractClassTrait};
use starknet::{ContractAddress};
use openmark::tests::unit::common::{SELLER1, BUYER1, TEST_NFT, TEST_PAYMENT, toAddress, ZERO_HASH};
use openmark::primitives::types::{Stage};

fn create_launchpad(owner: ContractAddress) -> (ContractAddress, ILaunchpadDispatcher) {
    let contract = declare("Launchpad").unwrap();
    let mut constructor_calldata = array![];
    constructor_calldata.append_serde(owner);

    let (contract_address, _) = contract.deploy(@constructor_calldata).unwrap();

    (contract_address, ILaunchpadDispatcher { contract_address })
}

// Value generated by script `create_merkle_tree`
const ROOT: felt252 = 0x055bd56277c7f6d8a43e368d693619129eabb968848688f93585911fee73154a;

const PROOF: [
    felt252
    ; 2] = [
    0x03ab7a2f13b922344ed643f927acf82c486bab97a73fdbba9dbcddb735735cba,
    0x077787c98250e3bffdb3069d2893e2d9c7805ae48dfa687b1471c8fcaa1901d6
];

#[test]
fn update_stages_works() {
    let owner = toAddress(SELLER1);
    let (contract_address, launchpad_contract) = create_launchpad(owner);

    let new_stages = array![
        Stage {
            id: 0,
            collection: toAddress(TEST_NFT),
            payment: toAddress(TEST_PAYMENT),
            price: 1,
            maxAllocation: 10,
            limit: 1,
            startTime: 0,
            endTime: 0,
        }
    ];

    let whitelists = array![Option::Some(ROOT)];

    launchpad_contract.updateStages(new_stages.span(), whitelists.span());
    let provider = ILaunchpadProviderDispatcher { contract_address };
    assert_eq!(provider.getStage(0).id, 0);
    assert_eq!(provider.getActiveStage(0).id, 0);
    assert_eq!(provider.getWhitelist(0), Option::Some(ROOT));
}

#[test]
#[should_panic(expected: ('Launchpad: stage not found',))]
fn remove_stages_works() {
    let owner = toAddress(SELLER1);
    let (contract_address, launchpad_contract) = create_launchpad(owner);

    let new_stages = array![
        Stage {
            id: 0,
            collection: toAddress(TEST_NFT),
            payment: toAddress(TEST_PAYMENT),
            price: 1,
            maxAllocation: 10,
            limit: 1,
            startTime: 0,
            endTime: 0,
        }
    ];

    let whitelists = array![Option::Some(ROOT)];

    launchpad_contract.updateStages(new_stages.span(), whitelists.span());
    launchpad_contract.removeStages(array![0].span());

    let provider = ILaunchpadProviderDispatcher { contract_address };
    provider.getStage(0);
}

#[test]
fn update_whitelist_works() {
    let owner = toAddress(SELLER1);
    let (contract_address, launchpad_contract) = create_launchpad(owner);

    let new_stages = array![
        Stage {
            id: 0,
            collection: toAddress(TEST_NFT),
            payment: toAddress(TEST_PAYMENT),
            price: 1,
            maxAllocation: 10,
            limit: 1,
            startTime: 0,
            endTime: 0,
        }
    ];

    launchpad_contract.updateStages(new_stages.span(), array![Option::None].span());
    let provider = ILaunchpadProviderDispatcher { contract_address };
    assert_eq!(provider.getWhitelist(0), Option::None);

    launchpad_contract.updateWhitelist(array![0].span(), array![Option::Some(ROOT)].span());
    assert_eq!(provider.getWhitelist(0), Option::Some(ROOT));
}

#[test]
fn remove_whitelist_works() {
    let owner = toAddress(SELLER1);
    let (contract_address, launchpad_contract) = create_launchpad(owner);

    let new_stages = array![
        Stage {
            id: 0,
            collection: toAddress(TEST_NFT),
            payment: toAddress(TEST_PAYMENT),
            price: 1,
            maxAllocation: 10,
            limit: 1,
            startTime: 0,
            endTime: 0,
        }
    ];

    launchpad_contract.updateStages(new_stages.span(), array![Option::Some(ROOT)].span());
    launchpad_contract.removeWhitelist(array![0].span());
    let provider = ILaunchpadProviderDispatcher { contract_address };
    assert_eq!(provider.getWhitelist(0), Option::None);
}

#[test]
fn verify_whitelist_works() {
    let owner = toAddress(SELLER1);

    let (contract_address, _launchpad_contract) = create_launchpad(owner);
    let provider = ILaunchpadProviderDispatcher { contract_address };

    assert!(provider.verifyWhitelist(ROOT, PROOF.span(), toAddress(BUYER1)));
}
